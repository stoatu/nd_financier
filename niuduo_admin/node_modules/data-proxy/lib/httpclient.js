/**
 * Http代理层，以RESTful方式发起请求，并按客户端要求，处理服务器返回的结果
 */


var qs = require('querystring');


var http = require('http');
var httpconf = require('./httpconf');
//var Result = require('./result');

var crypto = require('crypto');
var os = require('os');


//
//var Md5USE = require("../md5");

//前端开发时的url模拟数据映射
//var urlmap = require('../../../dev/urlmap');

//默认配置
var options = {
    host: httpconf.host,
    port: httpconf.port,
    path: httpconf.root,
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
    }
};

function handleInDevmode(req,res,opt){
    if(opt.url == null ||  opt.url == undefined ){
        res.status(500).send("fatal error : url is not defined in the data-request");
    }
    var data = urlmap[opt.url];
    //var data = require(datafile);
    var success = opt.success;
    if(success){
        success(res,JSON.stringify(data));
    }else{
        res.status(200).send(JSON.stringify(data));
    }
}


/**
 * 设置相对路径，参数和http方法，从数据服务层取数据,并直接发送到客户端
 * @param req
 * @param res
 * @param opt
 */
exports.handle = function(req,res,opt){
    //开发模式下的数据处理
    if(httpconf.devmode){
        handleInDevmode(req,res,opt);
        return;
    }

    if(opt.url == null ||  opt.url == undefined ){
        res.status(500).send("fatal error : url is not defined in the data-request");
    }
    var root = opt.root || httpconf.root;
    options.path = root + opt.url;
    options.method = opt.method || "POST";

    if(opt.params){
        opt.params.sessionid = req.cookies.sessionid;
    }else{
        opt.params = {};
        opt.params.sessionid = req.cookies.sessionid;
    }

    opt.params.ip = getClientIP(req);

    //opt.params.ip = getLocalIP();

    console.log("ipip: "+opt.params.ip);




    //验证
   // console.log("213");
    var key = "novemteam";
    var access_string = "chaogu";
    var access_time = "2015-12-06 12:30:00";

    var final_string = access_time+access_string+key;
   // console.log(final_string);
    var md5 = crypto.createHash('md5');
    md5.update(final_string);
    var access_token =md5.digest('hex');

//
    opt.params.access_string = access_string;
    opt.params.access_time = access_time;
    opt.params.access_token = access_token;
//
    //console.log("access_token  "+access_token);


    //微信加密
    var thirdparty_key = "1800250023409";
    var thirdparty_access_string = "21356402157";
    var thirdparty_access_time = new Date().getTime();
    var thirdparty_final_string = thirdparty_key + thirdparty_access_time + thirdparty_access_string;
    // console.log(thirdparty_final_string);
    var thirdparty_md5 = crypto.createHash('md5');
    thirdparty_md5.update(thirdparty_final_string);
    var thirdparty_access_token = thirdparty_md5.digest('hex');
    opt.params.app_id = thirdparty_key;
    opt.params.thirdparty_access_time = thirdparty_access_time;
    opt.params.thirdparty_access_token = thirdparty_access_token;


    //检查admin session id


    if(req.cookies.adminsessionid != ""  &&  req.cookies.adminsessionid != null &&  req.cookies.adminsessionid != "null" )
        opt.params.sessionid = req.cookies.adminsessionid;



    //设置 org_id

    opt.params.org_id = 0;

    //callback defined
    var success = opt.success;
    var error = opt.error;
    var httpclientError = opt.httpclientError;

    //request defined
    var request = http.request(options, function(feedback) {

        if (feedback.statusCode == 200) {
            var body = "";
            feedback.setEncoding('utf8');
            feedback.on('data', function (chunk) {
                //console.log('BODY: ' + chunk);
                body += chunk;
            }).on('end',function(){
                //callback
                if(success){
                    success(res,body);
                }else{
                    res.status(200).send(body);
                }
            });
        }else {
            if(error){
                error(res);
            }else{
                res.status(500).send("error caught in the data response which status-code is 500!");
            }
        }

    }).on('error', function(e) {
            console.log('problem with request: ' + e.message);
            if(httpclientError){
                httpclientError(res);
            }else{
                res.status(500).send("error occurred with request: "+ e.message);
            }
    });

    // write data to request body
    if(opt.params){
        request.write(qs.stringify(opt.params));
    }
    console.log("http://"+options.host+":"+options.port+options.path+"?"+qs.stringify(opt.params));
    request.end();
}

function getClientIP(req) {
    var ipAddress="";
    var headers = req.headers;
    var ip_real = headers['x-real-ip'];
    var forward_ip = headers['x-forwarded-for'];

    if (forward_ip != null) {

        console.log("forward_ip : ", forward_ip);

        if (forward_ip.length > 0)
            return forward_ip;
    }
    else
    {
        console.log("forward_ip :  null");
    }


    var remote_ip = req.connection.remoteAddress;
    var forwardedIpsStr = headers['x-real-ip'] || headers['x-forwarded-for'];
    forwardedIpsStr ? ipAddress = forwardedIpsStr : ipAddress = null;
    if (!ipAddress) {
        ipAddress = req.connection.remoteAddress;
    }


    if(ipAddress == null){
        return  "";
    }

    //只截取IP地址
    var ipArray=  ipAddress.split(":");
    if(ipArray.length>0){
        return ipArray[ipArray.length-1];
    }else{
        return ipAddress;
    }


}


function getLocalIP() {
    var map = [];
    var ifaces = os.networkInterfaces();
    console.log(ifaces);

    var access = 0;
    for (var dev in ifaces) {

        // console.log(dev);

        if(dev.indexOf('ppp') != -1)
        {
            access = 1;
            // map.push({"access" : 1});
        }
        else
        {
            //  map.push({"access" : 0});
        }

        if (dev.indexOf('eth0') != -1) {
            var tokens = dev.split(':');
            var dev2 = null;
            if (tokens.length == 2) {
                dev2 = 'eth1:' + tokens[1];
            } else if (tokens.length == 1) {
                dev2 = 'eth1';
            }
            if (null == ifaces[dev2]) {
                continue;
            }
            // 找到eth0和eth1分别的ip
            var ip = null, ip2 = null;
            ifaces[dev].forEach(function(details) {
                if (details.family == 'IPv4') {
                    ip = details.address;
                }
            });
            ifaces[dev2].forEach(function(details) {
                if (details.family == 'IPv4') {
                    ip2 = details.address;
                }
            });
            if (null == ip || null == ip2) {
                continue;
            }
            // 将记录添加到map中去
            if (ip.indexOf('10.') == 0 ||
                ip.indexOf('172.') == 0 ||
                ip.indexOf('192.') == 0) {
                // map.push({"intranet_ip" : ip, "internet_ip" : ip2});
            } else {
                // map.push({"intranet_ip" : ip2, "internet_ip" : ip});
            }


        }
    }
    console.log("ip: ", ip);
    //map.push({"access" : access});
    return ip;
}
